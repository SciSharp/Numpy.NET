// Copyright (c) 2020 by Meinrad Recheis (Member of SciSharp)
// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy.Models;
#if PYTHON_INCLUDED
using Python.Included;
#endif

namespace Numpy
{
    public static partial class np
    {
        
        /// <summary>
        ///	Return the roots of a polynomial with coefficients given in p.<br></br>
        ///	
        ///	The values in the rank-1 array p are coefficients of a polynomial.<br></br>
        ///	
        ///	If the length of p is n+1 then the polynomial is described by:
        ///	
        ///	Notes
        ///	
        ///	The algorithm relies on computing the eigenvalues of the
        ///	companion matrix [1].<br></br>
        ///	
        ///	References
        /// </summary>
        /// <param name="p">
        ///	Rank-1 array of polynomial coefficients.
        /// </param>
        /// <returns>
        ///	An array containing the roots of the polynomial.
        /// </returns>
        public static NDarray roots(this NDarray p)
        {
            //auto-generated code, do not change
            var __self__=self;
            var pyargs=ToTuple(new object[]
            {
                p,
            });
            var kwargs=new PyDict();
            dynamic py = __self__.InvokeMethod("roots", pyargs, kwargs);
            return ToCsharp<NDarray>(py);
        }
        
        
    }
}
